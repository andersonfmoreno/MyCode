/*******************************************************************************
	NOTICE:
	THIS INFORMATION IS CONFIDENTIAL AND PROPRIETARY TO INTEC TELECOM
	SYSTEMS, AND MAY NOT BE COPIED, MODIFIED, OR OTHERWISE USED.
;+
vivo_huawei_cgf_asn1_flat

Author:		Gustav L. Neto


Function:	This script converts an Huawei CGF R4 ASN1 CDR Format
		CCall Data Record to one or more "flattened" GPRS records.

Invocation:	From DCS Operation Manager - TRANSFORM Class

Record
 Definitions:	Input -	huawei_cgf_r8_asn1
		Output - vivo_gprs_flattened_<module_name>

		The term <module_name> means the name of one of the
		4 CCO call modules.


******************************************************************************/


//=============================================================================
// 				I N C L U D E S
//=============================================================================
$$
#include <dcs_cgdc.h>				// DCS Operation Manager
$$
#include <vivo_common_procedures.pro>   /* common procedures */

//=============================================================================
// 				D E F I N E S
//=============================================================================
#define TRUE	1
#define FALSE	0

//------------------------------------------------
// Defines used for ASN1 functions and ...
//------------------------------------------------
#define CGDC_ASN1_VERIFY        1

#define CGDC_ASN1_FIRST         1
#define CGDC_ASN1_NEXT          2
#define CGDC_ASN1_ROOT          3
#define CGDC_ASN1_CHILD         4
#define CGDC_ASN1_PARENT        5

#define CGDC_ASN1_PRIMITIVE     1
#define CGDC_ASN1_CONSTRUCTED   2

#define CGDC_ASN1_ERROR         0

#define MAX_RECORDSEQ  0xFFFFFF

//------------------- M O D U L E S ----------------------------
#define	SGSNPDPRecord_TAG	20
#define	GGSNPDPRecord_TAG	21
#define	SGSNSMORecord_TAG	23
#define	SGSNSMTRecord_TAG	24
#define SGWRecord_TAG	78
//Dividino - Projeto 4G
#define	PGWRecord_TAG	79
//Fim - Projeto 4G

#define	SGSNPDPRecord_Type	18
#define	GGSNPDPRecord_Type	19
#define	SGSNSMORecord_Type	21
#define	SGSNSMTRecord_Type	24
#define	SGWRecord_Type	84
#define	PGWRecord_Type	85

#define	SGSNPDPRecord		"SGSNPDPRecord"
#define	SGSNSMORecord		"SGSNSMORecord"
#define	SGSNSMTRecord		"SGSNSMTRecord"
// - Projeto 4G
#define GGSNPDPRecord		"GGSNPDPRecord"
#define GGSN "G"
// - Fim Projeto 4G

// Dividino - InclusÃ£o da leitura do PGWRecord Projeto 4G
#define PGWRecord		"PGWRecord"
#define PGW "P"
#define SGWRecord		"SGWRecord"
#define SGW "P"
// Fim - Projeto 4G


#define TIPO_REGISTRO_FLAT	"S"

//----> Causes For Record Closure
#define CAUSENormalRelease		 0
#define CAUSEAbnormalRelease		 4
#define CAUSECamelInitCallRelease	 5
#define CAUSEVolumeLimit		16
#define CAUSETimeLimit  		17
#define CAUSESGSNChange 		18
#define CAUSEMaxChangeCond		19
#define CAUSEManagementIntervention	20
#define CAUSEIntraSGSNIntersytemChange  21 //INC000000534898
#define CAUSEPLMNChange 	       101


//----> SESSION STATUS
#define SESSIONNormalRelease		"00"
#define SESSIONAbnormalRelease		"01"
#define SESSIONParcialRelease		"10"

//---> Segundos referentes a 90 dias
#define SEG_90D			 7776000
#define SEG_180D		15552000
#define SEG_360D		31104000


//---------------------------------------------------
// DEBUG_LEVEL defines the level of debug to display
// 	0 - No Debug
//	1 - Minimum Debug Info ( High Level)
//	2 - Intermidiate Debug Info
//	3 - Maximum Debug Info ( Low Level )
//---------------------------------------------------

#define DEBUG_LEVEL    0
#define TRACE(message)  \
        if(DEBUG_LEVEL == 1) debug (message);\
        if(DEBUG_LEVEL == 2)\
        {\
                debug_ctl("append","/tmp/cgdc_debug_vivo_filtar_cenarios_gprs");\
                debug (FORMAT("[%d@%s]:\t%s", $linenumber, $scriptname, message));\
                debug_ctl("close","/tmp/cgdc_debug_vivo_filtar_cenarios_gprs");\
        };

//------------------------------------------------
//---> MACROS
//------------------------------------------------
#define ASN(tag_position, field) cast (field, :                         \
                asn1_get_current_tag(FIELDINFO(field), tag_position))


//=============================================================================
//			    GLOBAL VARIABLES
//=============================================================================
declare static integer 	giRecordCount;
declare static integer 	giUplink;
declare static integer 	giDownlink;
declare static integer giRecordLength;
declare static integer giRetorno;

declare static string 	gsExtEquip;
declare static string	gsPortalEntrada;
declare static string 	gsFilename;
declare static integer giGenerateExtra;

declare static record 	"cgdc_asn1_pos" 	asn1_composite_pos;
declare static record 	"vivo_gprs7_raw_record" raw_data;

declare static record 	"cgdc_asn1_ctx" 	asn1_ctx;
declare static record 	"cgdc_asn1_pos" 	asn1_pos;

// Tabela de Portal Central
declare static record "reference_table"			hdl_PortalCentral;
declare static record "vivo_tab_portal_central_rec"	rec_PortalCentral;

// d95354 - Ariana Dias Coral - Accenture - 05/03/2015 
declare static record "reference_table"			hdl_PlmnTadig;
declare static record "vivo_tab_plmn_tadig_rec"	rec_PlmnTadig;


declare static datetime_string			gdtDataProcessamento;

declare static string 	gsCritica;
declare static string 	gsStartTime;
declare static string 	gsVolume;
declare static string 	gsDuration;

declare static string 	gsDescrEPS;


//Added Luciano Sa 2009/03
declare static record "vivo_irpt_transformacao" rIrptTransformExterno;
declare static string gsCodCentral;
declare static record	"vivo_irpt_transf_stage"	grIrptStage;

//d95354 - Big Data - ariana dias 05/03/2015
declare static string gsCgi;

//=============================================================================
//			    PROTOTYPE DEFINITIONS
//=============================================================================

//-----
prototype process_module(record "huawei_cgf_r9_asn1" input, record "cgdc_asn1_pos" asn1_pos, record "null" output, integer ref iFlatRecSize) returns integer;

//-----
prototype process_module_tags(record "huawei_cgf_r9_asn1" input,record "cgdc_asn1_pos" asn1_pos,string sRecType,virtual_record module_flat,integer iRecType);

//-----
prototype decode_tag(record "huawei_cgf_r9_asn1" input,record "cgdc_asn1_pos" asn1_pos,string sRecType,integer iTag,virtual_record module_flat,integer iRecType) returns integer;

prototype cenario_decode_tag(record "huawei_cgf_r9_asn1" input,record "cgdc_asn1_pos" asn1_pos,string sRecType,integer iTag,virtual_record module_flat,integer iRecType) returns integer;

//-----
prototype convert_date_or_time(string asn_string) returns string;

//-----
prototype decode_listofTrafficVol(record "huawei_cgf_r9_asn1" input,record "cgdc_asn1_pos" asn1_pos,integer iTag,virtual_record module_flat) returns integer;

//-----
prototype decode_tag_level3(record "huawei_cgf_r9_asn1" input,record "cgdc_asn1_pos" asn1_pos,integer iTag,virtual_record module_flat) returns integer;

//-----
prototype Format_IP_Address(string input)returns string;

//-----
prototype Format_accessPoint_Name(string input)returns string;

//-----
prototype Format_Time(string input)returns string;

//-----
prototype Swap (string number) returns string;

prototype Pow (integer iNumA, integer iNumB) returns unsigned long integer;

prototype hex_to_long (string sHex, integer iNum) returns long integer;

prototype hex_to_decimal (string sHex) returns string;

prototype formataCgiEcgi ( string sCgiTemp) returns integer;

prototype FiltraCenario
(
 string numA
)returns integer;

//-----------------------------------------------------------------------------
//			    	  INIT
//-----------------------------------------------------------------------------
procedure init
(
        record "cgi_dcs_sysparm" SYSPARM
)
{
declare integer iStatus;


	//---------------------------------------------------------------------
	//		        SYSTEM INFORMATION
	//---------------------------------------------------------------------
	gsExtEquip 		= dcs_cgdc_get_string_param (DCS_CGDC_INP_EXT_EQUIP);
	gsPortalEntrada 	= dcs_cgdc_get_string_param(DCS_CGDC_INP_DATA_PORTAL);
	gsFilename 		= dcs_cgdc_get_string_param (DCS_CGDC_FILENAME);
	gdtDataProcessamento 	= cgdc_get_local_time();			//Data e hora do processamento
	gsCritica		= "999";
	ALLOCATE( raw_data );

	//----------------------------------------------------------------------
	//Inicializa tabela vivo_tab_portal_central
	hdl_PortalCentral = reference_open("vivo_tab_portal_central");
	if ( hdl_PortalCentral == MAP(0) )
	{
		cgdc_puterr("OPEN_TBL", "%s|%s [%s:%d] Unable to open table [%s]",
			    gsExtEquip, gsPortalEntrada,
			    $scriptname, $linenumber, "vivo_tab_portal_central");
		DCS_RETURN_ABORT;
	}
	ALLOCATE (rec_PortalCentral);

	//----------------------------------------------------------------------
	//Busca regional na tabela de relacao Portal x Central
	rec_PortalCentral.SYSTEM = gsExtEquip;
	rec_PortalCentral.PORTAL = gsPortalEntrada;
	iStatus = 0;
	iStatus = reference_get (hdl_PortalCentral, rec_PortalCentral, CGDC_REFERENCE_EQUAL);

	if (!iStatus)
	{
		cgdc_puterr("OPEN_TBL", "%s|%s [%s:%d] Portal nao cadastrado",
			    gsExtEquip, gsPortalEntrada,
			    $scriptname, $linenumber);
		DCS_RETURN_ABORT;
	}
	
	//----------------------------------------------------------------------
	//Inicializa tabela vivo_tab_plmn_tadig
	hdl_PlmnTadig = reference_open("vivo_tab_plmn_tadig");
	if ( hdl_PlmnTadig == MAP(0) )
	{
		cgdc_puterr("OPEN_TBL", "%s|%s [%s:%d] Unable to open table [%s]",
			    gsExtEquip, gsPortalEntrada,
			    $scriptname, $linenumber, "vivo_tab_plmn_tadig");
		DCS_RETURN_ABORT;
	}
	ALLOCATE (rec_PlmnTadig);	

	//------------------------------------------------
	// Tell ASN.1 API about the Ericcson GPRS7 tags.
	// It creates a context for all other functions.
	//------------------------------------------------
	iStatus = asn1_init (asn1_ctx, "huawei_cgf_r9_asn1", CGDC_ASN1_VERIFY);

	//-----------------
	// ASN1 Init OK ?
	//-----------------
	if (iStatus != CGDC_STATUS_OK)
	{
	    cgdc_error_write ("asn1_init () failure.\n");
	    DCS_RETURN_REJECT;
	}

	//---------------------------------------------------------------------
	//		        TABLE DEFINITIONS
	//---------------------------------------------------------------------

	//---------------------------------------
	// Reference Table: TAP Recording Entity
	//---------------------------------------


	

	//----------------------------------------------------
	// Calls main() once more after last record.
	//----------------------------------------------------
	dcs_cgdc_term_processing ();

	//Add Luciano Sa 2009/03
	gsCodCentral = rec_PortalCentral.COD_CCC;
	//----------------------
    
    giGenerateExtra = 0;
    giRetorno =0;

	DCS_RETURN_OK;

}


//-----------------------------------------------------------------------------
//                             C O M M I T
//-----------------------------------------------------------------------------
// Called after all records are processed and after the main script was invoked
// for the last time. If the operation fails, this routine is not called.



//-----------------------------------------------------------------------------
//                               M A I N
//-----------------------------------------------------------------------------
procedure main
(
	record "cgi_dcs_sysparm"		SYSPARM,
	record "huawei_cgf_r9_asn1"		INPUT,
	integer					rec_size,
	record "null"	OUTPUT
)
{
	declare	integer status;
	declare	integer iStatus;
	declare integer iTag;
	declare string 	sTagName;
	declare string 	sModuleName;
	declare integer iRecordLength;
	declare integer iRetorno;
    declare string sPortal;

	//-----------------------------------------------------------
	// Process main(), once more after last record.
	// dcs_cgdc_term_processing() called at init()
	//-----------------------------------------------------------
        if (1 == dcs_cgdc_get_integer_param (DCS_CGDC_LAST_CALL))
	{
		//---------------------------------------------------------------------------
	  	// Tell ASN.1 API free all memory associated with processing an ASN.1 record
		//---------------------------------------------------------------------------
		asn1_term (asn1_ctx);

//TRACE1 ( ("\n:[DCS_CGDC_LAST_CALL] " ) );

		DCS_RETURN_OK;
	}


	giRecordCount 	= giRecordCount + 1;
	giUplink 	= 0;
	giDownlink 	= 0;
    iRetorno = 0;
    sPortal = "";

	//---------------------------------------
	// Build the ASN.1 tag tree.
	// Tell ASN.1 API about this new record.
	//---------------------------------------
	status = asn1_new_rec (asn1_ctx, asn1_pos, INPUT, sizeof(INPUT), CGDC_ASN1_VERIFY);
	if (status != CGDC_STATUS_OK)
	{
	    cgdc_error_write ("asn1_new_rec () failure.\n");
	    DCS_RETURN_REJECT;
	}

	//-------------------------------------------------------------------
	// The tag number of the current module is returned.
	//--------------------------------------------------------------------
	iTag = asn1_get_tag (asn1_pos);
	sTagName = table (iTag)
	{
		//---------------------------------------------------------------------------------------
		// Call details from the SGSN, containing information related to the radio network usage
		//---------------------------------------------------------------------------------------
		SGSNPDPRecord_TAG	=> SGSNPDPRecord;

		// - Projeto 4G
		//---------------------------------------------------------------------------------------
		// Call details from the SGSN, containing information related to the radio network usage
		//---------------------------------------------------------------------------------------
		GGSNPDPRecord_TAG	=> GGSNPDPRecord;
		// - Fim Projeto 4G

		//---------------------------------------------------------------------------------------
		// Call details from the SGSN, containing information related MO short message service;
		//---------------------------------------------------------------------------------------
		SGSNSMORecord_TAG	=> SGSNSMORecord;

		//---------------------------------------------------------------------------------------
		// Call details from the SGSN, containing information related MT short message service;
		//---------------------------------------------------------------------------------------
		SGSNSMTRecord_TAG	=> SGSNSMTRecord;
		
		SGWRecord_TAG	=> SGWRecord;		
				
		PGWRecord_TAG	=> PGWRecord;	

		// Dividino - Projeto 4G
		PGWRecord_TAG	=> PGWRecord;
		// Fim Projeto 4G

		default		=> ""
		{
//TRACE1 ( ("\n%d:[REJECT] Unknown cdr", giRecordCount ) )
			cgdc_error_write (FORMAT ("%s:%d: Unknown root tag encountered.\n", $scriptname, $linenumber));
			DCS_RETURN_REJECT;
		}
	}


//TRACE2( ("\n--------------------------------------------------------------------") );
//TRACE1 ( ("\n%d:[1] iTag=%d sTagName=%s '%s' \n", giRecordCount, iTag, sTagName, asn1_get_tag_name(asn1_pos)) );

         //----------------------------------------------
        // Update the context of all tags, based on the
        // syntax table found in the ACD file.
        //----------------------------------------------
	status = asn1_get_typedef (asn1_pos, sTagName);
	if (status)
	{
		cgdc_error_write ( FORMAT ("asn1_get_typedef () failure for '%s'.\n", sTagName));
		DCS_RETURN_REJECT;
	}

	//-----------------------------
	// Process the current module.
	//------------------------------
	status = process_module (INPUT, asn1_pos, OUTPUT, iRecordLength);
	giRecordLength = iRecordLength;
	
    
    TRACE(concat("antes do filtrar cenarios \n"));
   /* 
    if (giGenerateExtra == 0)
    {
        iRetorno = FiltraCenario(OUTPUT,sPortal);
    }
    */
    TRACE(concat("giRetorno[",giRetorno,"] \n"));
    
    if(giGenerateExtra == 0)
    {
        
         
        if(giRetorno == TRUE)
        {
            sPortal = "ASN1";            
            DCS_INPUT_TO_OUTPUT;
            TRACE(concat("MAPEOU O OUTPUT"));
            giGenerateExtra = 1;
            DCS_ADD_PORTAL(sPortal);
            DCS_SET_RECORD_TYPE (CONCAT("A_",sPortal));
            DCS_SET_OUTPUT_RECORD_LENGTH (rec_size);
            DCS_GENERATE_EXTRA;
        }
        else 
        {
            
            TRACE(concat("NÃ£o filtrou \n"));
            DCS_RETURN_OK;
            
        }
        
    }
    else
    {
        if(giGenerateExtra==1)
        {
            declare record "vivo_ericsson_gprs_flat_v2" 	GPRS; 
            sPortal = "FLAT";
            
            GPRS = map(OUTPUT);
            
            DCS_SET_RECORD_TYPE (CONCAT("F_",sPortal));
            DCS_SET_OUTPUT_RECORD_LENGTH (iRecordLength);
            DCS_ADD_PORTAL(sPortal);
            giGenerateExtra = 0;
        }

    }

	DCS_RETURN_OK;

} // end of main ()


//--------------------------------------------------------------------------------
// P R O C E S S _ M O D U L E .................................................
//
//Returns: DCS_OPER_OK		- module successfully processed
//	   DCS_OPER_OK_SKIP	- Discard record
//	   DCS_OPER_ERROR	- Discard record
//--------------------------------------------------------------------------------
procedure process_module
(
 record  "huawei_cgf_r9_asn1" 	input,
 record  "cgdc_asn1_pos" 		asn1_pos,
 record "null" 				output,
 integer ref 				iFlatRecSize
)
{
declare integer 	iStatus;
declare integer 	iTag;
declare string 		sTagName;
declare string 		sFlatRecordName;
declare virtual_record 	module_flat;



	iTag 	 = asn1_get_tag (asn1_pos);
	sTagName = asn1_get_tag_name(asn1_pos);

//TRACE1 ( ("\n%d:[PROCESS_MODULE] iTag = %d TagName='%s' \n", giRecordCount, iTag, sTagName) );

	//--------------------------------------------------------
	// Create the record name to associate to virtual record.
	//--------------------------------------------------------
	sFlatRecordName = TABLE (iTag)
	{
		// Tag	20
		SGSNPDPRecord_TAG	=> "vivo_ericsson_gprs_flat_v2";

		// - Projeto 4G
		// Tag	21
		GGSNPDPRecord_TAG	=> "vivo_ericsson_gprs_flat_v2";
		// Tag	78
		SGWRecord_TAG	=> "vivo_ericsson_gprs_flat_v2";			
		
		// - Fim Projeto 4G

		// - Projeto 4G
		// Tag	79
		PGWRecord_TAG	=> "vivo_ericsson_gprs_flat_v2";
		// - Fim Projeto 4G		

		// Tag	23
	    	SGSNSMORecord_TAG	=>  ""
		{
			gsCritica 	= "PG1";
			return(DCS_OPER_OK_SKIP);
		}

		// Tag	24
	    	SGSNSMTRecord_TAG	=>  ""
		{
			gsCritica 	= "PG1";
			return(DCS_OPER_OK_SKIP);
		}

	    	default => ""
	    	{
			gsCritica 	= "PG1";
			return (DCS_OPER_ERROR);
		}
	}

//TRACE2 ( ("%d: sFlatRecordName = '%s'\n", giRecordCount, sFlatRecordName) )    	;

	//-----------------------------------------
	// Define a virtual record for this module
	//-----------------------------------------
	iStatus = cgdc_vrec_assoc (module_flat, sFlatRecordName);

	if (iStatus == CGDC_STATUS_ERROR )
	{
		cgdc_error_code_write ("UNEXPECTED_RECDEF", "MINOR", "Unexpected Flattened Record Def '%s'.\n", sFlatRecordName);
		return (DCS_OPER_ERROR);
	}

	//-------------------------------------------
	// Point Virtual Record associated to output
	//-------------------------------------------
	module_flat	= MAP (output);

	//-----------------------------------
	// Get Record Size ov virtual record
	//-----------------------------------
	iFlatRecSize 	= cgdc_find_record_size (sFlatRecordName);

	//--------------------------------
 	// Fill Output record with blanks.
 	//--------------------------------
	cgdc_memset (output, ' ', iFlatRecSize);

	//----------------------------------------------------------
	// Process all of the tags in all sublevels of this module.
	//----------------------------------------------------------
	if (process_module_tags (input, asn1_pos, sFlatRecordName, module_flat, iTag) )
	{
//TRACE1 ( ("\n%d:[PM02] ERROR  iTag=%d '%s' \n", giRecordCount, iTag, asn1_get_tag_name(asn1_pos)) );
		cgdc_error_write ("process_module_tags () failure.\n");
		return (DCS_OPER_ERROR);
	}

	return (DCS_OPER_OK);

} // Fim process_module ()


//--------------------------------------------------------------------------------
// P R O C E S S _ M O D U L E _ T A G S .......................................
//
//Process all the tags in the current call or event module.
//
//Returns: 0:	module successfully decoded
//     	   1:	unrecognized tag
//--------------------------------------------------------------------------------
procedure process_module_tags
(
 record "huawei_cgf_r9_asn1" 	input,
 record "cgdc_asn1_pos" 		asn1_pos,
 string 				sRecType,
 virtual_record 			module_flat,
 integer 				iTagRecType
)
{
	declare integer iStatus;
	declare integer iTag;
	declare integer iTagError;
	declare integer iTagBit;

	declare record "cgdc_asn1_pos" new_pos;

//TRACE1 ( ("\n%d:[Process_Module_Tag] Init RECORD_TYPE='%s'", giRecordCount,sRecType) );

	//--------------------------------------------------------------
	// Upon entry, we always should be at a constructed module tag.
	//--------------------------------------------------------------
	asn1_copy_handle (asn1_pos, new_pos);

	//----------------------------------------------------------
	// Move to the child of this constructed tag.
	//----------------------------------------------------------
	iStatus = asn1_find_tag (new_pos, CGDC_ASN1_CHILD, 0);
	if (!iStatus)
	{
		cgdc_error_write ("asn1_find_tag () failure.\n");
		return (1);
	}

//TRACE1 ( ("\n%d:[PMT01] iTag = %d '%s' \n", giRecordCount, asn1_get_tag(new_pos), asn1_get_tag_name(new_pos)) );

	iTagBit 	= 0;
	iTagError 	= FALSE;

	//----------------------------------------------------------
	// Loop, extracting each field from the module, and moving
	// it to the field of the same name in the virtual record.
	//----------------------------------------------------------
	while (iStatus)
	{
		iTag = asn1_get_tag (new_pos);

		//-----------------------------
		// Mark bit map with this tag.
		//-----------------------------
$$
		iTagBit = 0x80 >> iTag%8;
$$
	         // BYTE (module_flat.header.tagmap, tag/8) = BYTE (module_flat.header.tagmap, tag/8) | iTagBit;

		//-------------
		// Decode Tags
		//-------------
        if (giGenerateExtra == 0)
        {
            cenario_decode_tag (input, new_pos, sRecType, iTag, module_flat, iTagRecType);
            
        }
        else 
        {
        
            decode_tag (input, new_pos, sRecType, iTag, module_flat, iTagRecType);
        }
		iStatus = asn1_find_tag (new_pos, CGDC_ASN1_NEXT, 0);
//TRACE1 ( ("\n%d:[PMT03] iTag = %d '%s' \n", giRecordCount, asn1_get_tag(new_pos), asn1_get_tag_name(new_pos)) );
	}


	return (0);

} // Fim process_module_tags ()

procedure cenario_decode_tag
(
 record "huawei_cgf_r9_asn1" 	input,
 record "cgdc_asn1_pos" 		asn1_pos,
 string 				sRecType,
 integer 				iTag,
 virtual_record 			module_flat,
integer 				iTagRecType
) returns integer
{
	declare record "cgdc_asn1_pos"       	new_pos;
	declare record "cgdc_asn1_pos"       	prev_pos;
	declare record "cgdc_asn1_pos"       	third_pos;
	declare record "cgdc_asn1_pos"       	fourth_pos;
	declare record "cgdc_asn1_pos"       	curr_pos;
	declare record "field_info" 		fAux;

	declare integer  status;
	declare integer  ntag;
	declare integer  iTarget;
	declare integer  asn_integer;
	declare integer  iStatus;
	declare integer  iStatus1;
	declare integer iReturn;
    declare string numA;


    numA = "";
        
       if (iTag != 27 && iTag != 22)
       {
           return;
       }           

    TRACE(CONCAT("iTag[",iTag,"] \n"));

        iStatus = table ( iTagRecType  )
        {
        //-------------------------------------------------------------------------
        // SGSNPDPRecord  - Module 0 ( 20 )
        //-------------------------------------------------------------------------
            SGSNPDPRecord_TAG => 1
            {

                iTarget = table (iTag)
                {


                    // servedMSISDN
                    27		=> 0
                    {
                        numA  =  Swap( ASN(asn1_pos, input.OctetString));
                        TRACE(CONCAT("27 numA[",numA,"] \n"));
                        
                    }

                    DEFAULT => 0;
                }
            }

        // - Projeto 4G
        //-------------------------------------------------------------------------
        // GGSNPDPRecord  - Module 0 ( 21 )
        //-------------------------------------------------------------------------
        GGSNPDPRecord_TAG => 1
        {
            iTarget = table (iTag)
            {
                

                // servedMSISDN
                22		=> 0
                {
                    numA 	=  Swap( ASN(asn1_pos, input.OctetString));
                    TRACE(CONCAT("GGSNPDPRecord numA[",numA,"] \n"));
                    
                }

               


                DEFAULT => 0;
            }
        }
        // - Fim Projeto 4G

       //-------------------------------------------------------------------------
        // SGWRecord  - Module 0 ( 78 )
        //-------------------------------------------------------------------------
        SGWRecord_TAG => 1
        {
            iTarget = table (iTag)
            {

                // servedMSISDN
                22		=> 0
                {
                    numA  =  Swap( ASN(asn1_pos, input.OctetString));
                     TRACE(CONCAT("SGWRecord_TAG numA[",numA,"] \n"));
                     
                }

         
                DEFAULT => 0;
            }
        }       
        
        // Dividino - Projeto 4G
        //-------------------------------------------------------------------------
        // PGWRecord  - Module 0 ( 79 )
        //-------------------------------------------------------------------------
        PGWRecord_TAG => 1
        {
            iTarget = table (iTag)
            {

                // servedMSISDN
                22		=> 0
                {
                    numA =  Swap( ASN(asn1_pos, input.OctetString));
                    TRACE(CONCAT("servedMSISDN numA[",numA,"] \n"));
                    
                }
                DEFAULT => 0;
            }
        }
        // - Fim Projeto 4G		



	   //-------------------------------------------------------------------------
	   // SGSNSMORecord  - Module 0 ( 23 )
	   //-------------------------------------------------------------------------
  	   SGSNSMORecord_TAG	=> 1;

	   //-------------------------------------------------------------------------
	   // SGSNSMTRecord  - Module 0 ( 24 )
	   //-------------------------------------------------------------------------
  	   SGSNSMTRecord_TAG	=> 1;


    	default => 0;
	}

    if (numA !="")
    {
       return FiltraCenario(numA);
    }

} // Fim decode_tag ()



//---------------------------------------------------------------------------------
//   D E C O D E _ T A G
//
//Extract 'tag' data from ASN.1.
//
//Returns: 0:	tag successfully decoded
//	   1:	unrecognized tag
//----------------------------------------------------------------------------------
procedure decode_tag
(
 record "huawei_cgf_r9_asn1" 	input,
 record "cgdc_asn1_pos" 		asn1_pos,
 string 				sRecType,
 integer 				iTag,
 virtual_record 			module_flat,
integer 				iTagRecType
) returns integer
{
	declare record "cgdc_asn1_pos"       	new_pos;
	declare record "cgdc_asn1_pos"       	prev_pos;
	declare record "cgdc_asn1_pos"       	third_pos;
	declare record "cgdc_asn1_pos"       	fourth_pos;
	declare record "cgdc_asn1_pos"       	curr_pos;
	declare record "field_info" 		fAux;

	declare integer  status;
	declare integer  ntag;
	declare integer  iTarget;
	declare integer  asn_integer;
	declare integer  iStatus;
	declare integer  iStatus1;
	declare string 	 asn_ia5string;
	declare string 	 sTemp;
	declare string   sTemp2;
	declare string   sChargingId;
	declare unsigned integer iShortInteger;
	declare string   sCgiTemp;
	declare integer iReturn;

	declare string sLac;
	declare string sCn;
	declare string sPlmn;
	declare string sResult;
	declare string sCellIdentifier;

	// Projeto IPv6
	declare string sAux;
	declare string dig1;
	declare string dig2;
	declare string dig3;
	declare string dig4;
	declare string dig5;
	declare string dig6;
	declare string dig7;
	declare string dig8;
	
	sTemp = "";
	sTemp2 = "";
	sChargingId = "";
	sCgiTemp = "";
	sLac = "";
	sCn = "";
	sPlmn = "";
	sResult = "";
	sCellIdentifier = "";
	

//TRACE1 ( ("\n%d:[decode tag-02] Record Type=%d TAG = %d \n", giRecordCount, iTagRecType, iTag) )



	iStatus = table ( iTagRecType  )
	{
	   //-------------------------------------------------------------------------
	   // SGSNPDPRecord  - Module 0 ( 20 )
	   //-------------------------------------------------------------------------
	   SGSNPDPRecord_TAG => 1
	   {

		iTarget = table (iTag)
		{

		    // recordType
		    0		=> 0
		    {
			asn_integer = ASN(asn1_pos, input.Integer);

			if ( asn_integer == SGSNPDPRecord_Type )
			{
				//--------------------------------
				// Atribue "S".
				//--------------------------------
				module_flat.RECORD_TYPE = TIPO_REGISTRO_FLAT;
			}
		    }

		    // servedIMSI
		    3		=> 0
		    {	
		    	module_flat.SERVED_IMSI = ASN(asn1_pos, input.IMSI);

//TRACE1 ( ("\nSERVED_IMSI='%s' \n", module_flat.SERVED_IMSI) )

			module_flat.SERVED_IMSI 	= Swap( ASN(asn1_pos, input.OctetString));

//TRACE1 ( ("\nSERVED_IMSI='%s' \n", module_flat.SERVED_IMSI) )
		    }

		    // servedIMEI
		    4		=> 0
		    {			
		    	module_flat.SERVED_IMEI = ASN(asn1_pos, input.IMEI);

//TRACE1 ( ("\nSERVED_IMEI='%s' \n", module_flat.SERVED_IMEI) )

			module_flat.SERVED_IMEI 	= Swap(ASN(asn1_pos, input.OctetString));

//TRACE1 ( ("\nSERVED_IMEI='%s' \n", module_flat.SERVED_IMEI) )
		    }


//			//-- msNetworkCapab
//		    6		=> 0
//		    {
//			module_flat.msNetworkCapab 	= cgdc_hex_to_integer ( ASN(asn1_pos, input.OctetString));
//		    }
//
//			// -- routingArea
//		    7	 => 0
//		    {
//			module_flat.routingArea 	= ASN(asn1_pos, input.OctetString);
//		    }
//
//		    	//   locationArea
		    8		=> 0
		    {			
				// Implementacao MVNO Demanda 94131 Inicio
				// Passa a utilizar o valor inteiro do LAC em hexa, e nao apenas o CN
			 	//sTemp = cgdc_hex_to_integer ( ASN(asn1_pos, input.OctetString));
			 	module_flat.LOCATION_AREA_CODE = ASN(asn1_pos, input.OctetString);
						
		    }
//d95354 - Big Data, retirado o comentÃ¡rio para passar a mapear o campo
			//  cellIdentifier
		    9		=> 0
		    {			
	
				//d95354 - big Data - Ariana Dias  SGSNPDPRecord_TAG	
				module_flat.CELL = ASN(asn1_pos, input.OctetString);				
				sLac = module_flat.LOCATION_AREA_CODE;
				sCn = SUFFIX (cgdc_hex_to_integer(sLac), 2);	
				
				rec_PlmnTadig.CN = sCn;

				if (reference_search(hdl_PlmnTadig,rec_PlmnTadig))
				{		
					sPlmn = rec_PlmnTadig.PLMN;
				
					sCellIdentifier 	= cgdc_hex_to_integer ( ASN(asn1_pos, input.OctetString));					
					while (sizeof(sCellIdentifier) < 5)
					{
						sCellIdentifier = concat("0",sCellIdentifier);
					}				
					
					sLac = cgdc_hex_to_integer (sLac);
					while (sizeof(sLac) < 5)
					{
						sLac = concat("0",sLac);
					}						
					
					sResult = CONCAT(sPlmn,sLac,sCellIdentifier);
					
					module_flat.CGI = sResult;						
				}
				else
				{
					module_flat.CGI = "";	
				}					
				//d95354 - fim		
		    }

		    	//  chargingID
		    10		=> 0
		    {		
			//TRACE1 ( ("\n%d:[decode tag-02] Tag 10 ANTE  \n", giRecordCount ) )
		    	//sTemp = ASN(asn1_pos, input.Integer ); //ChargingID );
			//TRACE1 ( ("\n%d:[decode tag-02] sTemp='%s'  \n", giRecordCount, sTemp ) )
			//iShortInteger 			= cgdc_hex_to_integer ( sTemp );
			//TRACE1 ( ("\n%d:[decode tag-02] iShortInteger='%d'  \n", giRecordCount, iShortInteger ) )
			//module_flat.CHARGING_ID 	= iShortInteger;  //ASN(asn1_pos, input.ChargingID );
			//TRACE1 ( ("\n%d:[decode tag-02] sTemp='%s'  \n", giRecordCount, module_flat.CHARGING_ID ) )
			//module_flat.CHARGING_ID       = ASN(asn1_pos, input.Integer );
			sChargingId = ASN(asn1_pos, input.OctetString);
			module_flat.CHARGING_ID       = hex_to_decimal(sChargingId);

		    }

		    	//  accessPointNameNI
		    12		=> 0
		    {			
			clear( raw_data );
			raw_data.data 			= ASN(asn1_pos, input.IA5String);
			//module_flat.APN_NI 		= Format_accessPoint_Name ( ASN(asn1_pos, input.IA5String) );
			module_flat.APN_NI 		= ASN(asn1_pos, input.IA5String);
		    }

//		    	//  pdpType
//		    13		=> 0
//		    {
//			sTemp 		= ASN(asn1_pos, input.OctetString);
//		    }
//

		    // 15 - listOfTrafficVolume (SEQUENCE of)
		    15 		=> 0
		    {
			//-----------------------------------------------------------
			// Decode Tags Level 3
			//-----------------------------------------------------------
			decode_listofTrafficVol(input, asn1_pos, iTag, module_flat);
		    }

		    	//  recordOpeningTime
		    16		=> 0
		    {
			gsStartTime = CONCAT( "20", PREFIX( ASN(asn1_pos, input.OctetString), 12));
		    	//gsStartTime = PREFIX( ASN(asn1_pos, input.OctetString), 12);
			module_flat.START_TIME 		= gsStartTime;
		    }
		    	//  duration
		    17		=> 0
		    {
			gsDuration = ASN(asn1_pos, input.Integer );
			module_flat.DURATION 		= gsDuration;
		    }

//		    	//  sgsnChange
//		    18		=> 0
//		    {
//			module_flat.gsnChange 		= ASN(asn1_pos, input.Boolean );
//		    }

		    	// CauseForRecClosing
		    19		=> 0
		    {
			module_flat.SESSION_STATUS = ASN(asn1_pos, input.Integer );
		    }

		    	//  recordSequenceNumber
		    21		=> 0
		    {
			asn_integer 			= ASN(asn1_pos, input.Integer );
			module_flat.AGGREGATION_CAUSE	= FORMAT( "%3.3d", asn_integer);

		    }



//		    	//
//		    22		=> 0
//		    {
//			module_flat.nodeID 		= ASN(asn1_pos, input.IA5String );
//		    }
//
//		    	//  ApnSelectionMode
//		    25		=> 0
//		    {
//			sTemp 	= ASN(asn1_pos, input.Enumerated);
//		    }

 			// accessPointNameOI
		    26		=> 0
		    {
			clear( raw_data );
			raw_data.data 			= ASN(asn1_pos, input.IA5String);
			//module_flat.APN_OI	 	= Format_accessPoint_Name ( ASN(asn1_pos, input.IA5String ));
			module_flat.APN_OI	 	= ASN(asn1_pos, input.IA5String );
		    }

			// servedMSISDN
		    27		=> 0
		    {
			sTemp 	=  Swap( ASN(asn1_pos, input.OctetString));
			//module_flat.SERVED_MSISDN = cgdc_substring(sTemp,2,-1);
			module_flat.SERVED_MSISDN = sTemp;
		    }

//			// chargingCharacteristics
//		    28		=> 0
//		    {
//			module_flat.chargingCharact 	= ASN(asn1_pos, input.OctetString);
//		    }
//
//			// rATType - Projeto Big Data
		    29		=> 0
		    {
					module_flat.RAT_TYPE = ASN(asn1_pos, input.Integer);

		    }
//
//		    	// Camel InformationPDP
//		    30		=> 0
//		    {
//			cgdc_error_write ( "Procesando SGSNPDPRecord / cAMELInformationPDP, but not defined parse 4 it.");
//			DCS_RETURN_REJECT;
//		    }
//		    	// pLMNIdentifier
//		    101		=> 0
//		    {
//			module_flat.pLMNIdentifier 	= ASN(asn1_pos, input.OctetString);
//		    }


		    //------------------------------------------------
		    //  5 - gsnAddres      - This only one level down
		    // 11 - gsnAddresUsed  - This only one level down
		    // 14 - servedAddress  - This is 2 levels down
		    // 20 - diagnostics	   - This is 1 levels down
		    //------------------------------------------------
		    5, 11, 14, 20, 36 => 0
		    {
			asn1_copy_handle (asn1_pos, new_pos);

			//----------------------------------------------
			// Go to the 2nd(Child) level.
			//------------------------------------------------
			status = asn1_find_tag (new_pos, CGDC_ASN1_CHILD, 0);
			if (!status)
			{
				cgdc_error_write ("asn1_find_tag () failure.\n");
				return (1);
			}

			ntag = asn1_get_tag (new_pos);
//TRACE1 ( ("\n%d:(decode tag-03) TAG=%d, NUEVA TAG=%d '%s' \n", giRecordCount, iTag, ntag, asn1_get_tag_name(new_pos)) )

			iStatus1 = TABLE(iTag)
			{
				//  5 - gsnAddres      - This only one level down
				5 => 1
				{
					module_flat.SGSN_ADDRESS = Format_IP_Address( ASN(new_pos, input.OctetString));
				}

				// 11 - gsnAddresUsed  - This only one level down
				11 => 1
				{
					module_flat.GGSN_ADDRESS = Format_IP_Address( ASN(new_pos, input.OctetString) );
				}

				// 20 - diagnostics	   - This is 1 levels down
				20 => 1
			    	{
					module_flat.DIAGNOSTICS = ASN(new_pos, input.Integer );
			    	}
				DEFAULT => 1
				{	// tag is either 14

					asn1_copy_handle (new_pos, third_pos);

					status 	= asn1_find_tag (third_pos, CGDC_ASN1_CHILD, 0);
					ntag 	= asn1_get_tag (third_pos);

					if ( iTag == 14 )
					{
						if (status)
						{
							if ( ntag == 0 )
							{
								sAux = ASN(third_pos, input.OctetString);
								
								//module_flat.SERVED_PDP_ADDRESS = Format_IP_Address( ASN(third_pos, input.OctetString));
								TRACE(CONCAT("valor asn1 - tag 0: ",sAux,"\n"));
								TRACE(CONCAT("asn1 Tam - tag 0: ",sizeof(sAux),"\n"));
								
									TRACE(CONCAT("IPv4 - tag 0: ",sAux,"\n"));
									TRACE(CONCAT("IPv4 Tam - tag 0: ",sizeof(sAux),"\n"));
									module_flat.SERVED_PDP_ADDRESS = Format_IP_Address( ASN(third_pos, input.OctetString));
								
							}
							else if ( ntag == 1 )
							{
								sAux = ASN(third_pos, input.OctetString);
								
								//module_flat.SERVED_PDP_ADDRESS = Format_IP_Address( ASN(third_pos, input.OctetString));
								TRACE(CONCAT("valor asn1 - tag 1: ",sAux,"\n"));
								TRACE(CONCAT("asn1 Tam - tag 1: ",sizeof(sAux),"\n"));
								
									TRACE(CONCAT("IPv6 - tag 1: ",sAux,"\n"));
									TRACE(CONCAT("IPv6 Tam - tag 1: ",sizeof(sAux),"\n"));
									
									dig1 = cgdc_substring (sAux, 0, 4);
									dig2 = cgdc_substring (sAux, 4, 4);
									dig3 = cgdc_substring (sAux, 8, 4);
									dig4 = cgdc_substring (sAux, 12, 4);
									dig5 = cgdc_substring (sAux, 16, 4);
									dig6 = cgdc_substring (sAux, 20, 4);
									dig7 = cgdc_substring (sAux, 24, 4);
									dig8 = cgdc_substring (sAux, 28, 4);
								
									module_flat.IPV6_ADDRESS = (FORMAT ("%s:%s:%s:%s:%s:%s:%s:%s" , dig1, dig2, dig3, dig4, dig5, dig6, dig7, dig8 ));
							}
						}
					}
					if ( iTag == 36 )
                    {TRACE("ENTROU NA TAG 36\n");
                        if (status)
                        {
                            if ( ntag == 0 )
                            {
                                sAux = ASN(third_pos, input.OctetString);
								
                                //module_flat.SERVED_PDP_ADDRESS = Format_IP_Address( ASN(third_pos, input.OctetString));
								
								TRACE(CONCAT("valor asn1: ",sAux,"\n"));
								TRACE(CONCAT("asn1 Tam: ",sizeof(sAux),"\n"));
								
									TRACE(CONCAT("IPv4: ",sAux,"\n"));
									TRACE(CONCAT("IPv4 Tam: ",sizeof(sAux),"\n"));
									module_flat.SERVED_PDP_ADDRESS = Format_IP_Address( ASN(third_pos, input.OctetString));
							}
							else if ( ntag == 1 )
							{
								sAux = ASN(third_pos, input.OctetString);
								
								//module_flat.SERVED_PDP_ADDRESS = Format_IP_Address( ASN(third_pos, input.OctetString));
								TRACE(CONCAT("valor asn1 - tag 1: ",sAux,"\n"));
								TRACE(CONCAT("asn1 Tam - tag 1: ",sizeof(sAux),"\n"));
								
									TRACE(CONCAT("IPv6 - tag 1: ",sAux,"\n"));
									TRACE(CONCAT("IPv6 Tam - tag 1: ",sizeof(sAux),"\n"));
									
									dig1 = cgdc_substring (sAux, 0, 4);
									dig2 = cgdc_substring (sAux, 4, 4);
									dig3 = cgdc_substring (sAux, 8, 4);
									dig4 = cgdc_substring (sAux, 12, 4);
									dig5 = cgdc_substring (sAux, 16, 4);
									dig6 = cgdc_substring (sAux, 20, 4);
									dig7 = cgdc_substring (sAux, 24, 4);
									dig8 = cgdc_substring (sAux, 28, 4);
								
									module_flat.IPV6_ADDRESS = (FORMAT ("%s:%s:%s:%s:%s:%s:%s:%s" , dig1, dig2, dig3, dig4, dig5, dig6, dig7, dig8 ));
							}
                        }
                    }
					
				}
			}


			asn1_copy_handle (new_pos, asn1_pos);

		    }


    		    DEFAULT => 0;
		}
  	   }

        // - Projeto 4G
        //-------------------------------------------------------------------------
        // GGSNPDPRecord  - Module 0 ( 21 )
        //-------------------------------------------------------------------------
        GGSNPDPRecord_TAG => 1
        {
            iTarget = table (iTag)
            {
                // recordType
                0		=> 0
                {
                        asn_integer = ASN(asn1_pos, input.Integer);
                        if ( asn_integer == GGSNPDPRecord_Type )
                        {
                            module_flat.RECORD_TYPE = GGSN;
                        }
                }
                
                //networkInitiation
                //1		=> 0
                //{
                //}

                // servedIMSI
                3		=> 0
                {
                    module_flat.SERVED_IMSI = ASN(asn1_pos, input.IMSI);
                    module_flat.SERVED_IMSI 	= Swap( ASN(asn1_pos, input.OctetString));
                }
                
                // ggsnAddress
                //4		=> 0
                //{
                //}

                //chargingID
                5		=> 0
                {
                    sChargingId = ASN(asn1_pos, input.OctetString);
                    module_flat.CHARGING_ID       = hex_to_decimal(sChargingId);
                }
                // sgsnAddress
                //6		=> 0
                //{
                //}

                // accessPointNameNI
                7	    => 0
                {
                    clear( raw_data );
                    raw_data.data 			= ASN(asn1_pos, input.IA5String);
                    module_flat.APN_NI 		= ASN(asn1_pos, input.IA5String);
                }
                // pdpType
                //8		=> 0
                //{
                //}

                // servedPDPAddress
                //9		=> 0
                //{
                //}

                //  dynamicAddressFlag
                //11		=> 0
                //{
                //}

                //  listOfTrafficVolumes
                12		=> 0
                {
                    //-----------------------------------------------------------
                    // Decode Tags Level 3
                    //-----------------------------------------------------------
                    decode_listofTrafficVol(input, asn1_pos, iTag, module_flat);
                }
                //  recordOpeningTime
                13		=> 0
                {
                    gsStartTime = CONCAT( "20", PREFIX( ASN(asn1_pos, input.OctetString), 12));
                    module_flat.START_TIME 		= gsStartTime;
                }
                // duration
                14		=> 0
                {
                    gsDuration = ASN(asn1_pos, input.Integer );
                    module_flat.DURATION 		= gsDuration;
                }
                // causeForRecClosing
                15 		=> 0
                {
                    module_flat.SESSION_STATUS = ASN(asn1_pos, input.Integer );
                }
                //  diagnostics
                //16		=> 0
                //{
                //}

                //  recordSequenceNumber
                17		=> 0
                {
                    asn_integer 			= ASN(asn1_pos, input.Integer );
                    module_flat.AGGREGATION_CAUSE	= FORMAT( "%3.3d", asn_integer);
                }

                //  nodeID
                //18		=> 0
                //{
                //}

                // recordExtensions
                //19		=> 0
                //{
                //}

                // localSequenceNumber
                //20		=> 0
                //{
                //}

                //  apnSelectionMode
                //21		=> 0
                //{
                //}

                // servedMSISDN
                22		=> 0
                {
                    sTemp 	=  Swap( ASN(asn1_pos, input.OctetString));
                    module_flat.SERVED_MSISDN = sTemp;
                }

                // chargingCharacteristics
                //23 	=> 0
                //{
                //}

                //  sgsnPLMNIdentifier
                //27		=> 0
                //{
                //}

                //  servedIMEISV
                29		=> 0
                {
                    module_flat.SERVED_IMEI = ASN(asn1_pos, input.IMEI);
                    module_flat.SERVED_IMEI 	= Swap(ASN(asn1_pos, input.OctetString));
                }

                //  rATType
                //30		=> 0
                //{
                //}

                //  mSTimeZone
                //31		=> 0
                //{
                //}

                //  userLocationInformation
                //32		=> 0
                //{
                //}

                //  cAMELChargingInformation
                //33		=> 0
                //{
                //}


                //------------------------------------------------
                //  4 - gsnAddres      				- This only one level down
                //  6 - sgsnAddress  						- This only one level down
                // 19 - recordExtensions				- This only one level down
                // 9 - servedPDPAddress	   			- This is 2 levels down
                // 12 - listOfTrafficVolumes   	- This is 2 levels down
                //------------------------------------------------
                4, 6, 19, 9, 12 => 0
                {
                        asn1_copy_handle (asn1_pos, new_pos);
                        //----------------------------------------------
                        // Go to the 2nd(Child) level.
                        //------------------------------------------------
                        status = asn1_find_tag (new_pos, CGDC_ASN1_CHILD, 0);
                        if (!status)
                        {
                            cgdc_error_write ("asn1_find_tag () failure.\n");
                            return (1);
                        }

                        ntag = asn1_get_tag (new_pos);

                        iStatus1 = TABLE(iTag)
                        {
                            //  4 - gsnAddres      - This only one level down
                            4 => 1
                            {
                                module_flat.GGSN_ADDRESS = Format_IP_Address( ASN(new_pos, input.OctetString) );
                            }

                            //  6 - sgsnAddress     - This only one level down
                            6 => 1
                            {
                                module_flat.SGSN_ADDRESS = Format_IP_Address( ASN(new_pos, input.OctetString));
                            }

                            //  19 - recordExtensions     - This only one level down
                            //19 => 1
                            //{
                            //}

                            // 12 - listOfTrafficVolumes	      - This only one level down
                            //12 => 1
                            //{
                            //}

                            // 20 - diagnostics	   - This is 1 levels down
                            //20 => 1
                            //{
                            //}

                            DEFAULT => 1
                            {	// tag is either 14

                                asn1_copy_handle (new_pos, third_pos);

                                status 	= asn1_find_tag (third_pos, CGDC_ASN1_CHILD, 0);
                                ntag 	= asn1_get_tag (third_pos);

                                if ( iTag == 9 )
                                {
                                    if (status)
                                    {
                                        if ( ntag == 0 )
                                        {
                                            module_flat.SERVED_PDP_ADDRESS = Format_IP_Address( ASN(third_pos, input.OctetString));
                                        }
                                    }
                                }
                            }
                        }
                        asn1_copy_handle (new_pos, asn1_pos);
                    }
                DEFAULT => 0;
            }
        }
        // - Fim Projeto 4G

       //-------------------------------------------------------------------------
        // SGWRecord  - Module 0 ( 78 )
        //-------------------------------------------------------------------------
        SGWRecord_TAG => 1
        {
            iTarget = table (iTag)
            {
                // recordType
                0		=> 0
                {
                        asn_integer = ASN(asn1_pos, input.Integer);
                        if ( asn_integer == SGWRecord_Type )
                        {
                            module_flat.RECORD_TYPE = SGW;
                        }
                }
                
                //networkInitiation
                //1		=> 0
                //{
                //}

                // servedIMSI
                3		=> 0
                {
                    module_flat.SERVED_IMSI = ASN(asn1_pos, input.IMSI);
                    module_flat.SERVED_IMSI 	= Swap( ASN(asn1_pos, input.OctetString));
                }
                
                // ggsnAddress
                //4		=> 0
                //{
                //}

                //chargingID
                5		=> 0
                {
                    sChargingId = ASN(asn1_pos, input.OctetString);
                    module_flat.CHARGING_ID       = hex_to_decimal(sChargingId);
                }
                // servingNodeAddress
                //6		=> 0
                //{
                //}

                // accessPointNameNI
                7	    => 0
                {
                    clear( raw_data );
                    raw_data.data 			= ASN(asn1_pos, input.IA5String);
                    module_flat.APN_NI 		= ASN(asn1_pos, input.IA5String);
                }
                // pdpType
                //8		=> 0
                //{
                //}

                // servedPDPAddress
                //9		=> 0
                //{
                //}

                //  dynamicAddressFlag
                //11		=> 0
                //{
                //}

                //  listOfTrafficVolumes
                12		=> 0
                {
                    //-----------------------------------------------------------
                    // Decode Tags Level 3
                    //-----------------------------------------------------------
                    decode_listofTrafficVol(input, asn1_pos, iTag, module_flat);
                }
                //  recordOpeningTime
                13		=> 0
                {
                    gsStartTime = CONCAT( "20", PREFIX( ASN(asn1_pos, input.OctetString), 12));
                    module_flat.START_TIME 		= gsStartTime;
                }
                // duration
                14		=> 0
                {
                    gsDuration = ASN(asn1_pos, input.Integer );
                    module_flat.DURATION 		= gsDuration;
                }
                // causeForRecClosing
                15 		=> 0
                {
                    module_flat.SESSION_STATUS = ASN(asn1_pos, input.Integer );
                }
                //  diagnostics
                //16		=> 0
                //{
                //}

                //  recordSequenceNumber
                17		=> 0
                {
                    asn_integer 			= ASN(asn1_pos, input.Integer );
                    module_flat.AGGREGATION_CAUSE	= FORMAT( "%3.3d", asn_integer);
                }

                //  nodeID
                //18		=> 0
                //{
                //}

                // recordExtensions
                //19		=> 0
                //{
                //}

                // localSequenceNumber
                //20		=> 0
                //{
                //}

                //  apnSelectionMode
                //21		=> 0
                //{
                //}

                // servedMSISDN
                22		=> 0
                {
                    sTemp 	=  Swap( ASN(asn1_pos, input.OctetString));
                    module_flat.SERVED_MSISDN = sTemp;
                }

                // chargingCharacteristics
                //23 	=> 0
                //{
                //}

                // chChSelectionMode
                //24 	=> 0
                //{
                //}

                // iMSsignalingContex
                //25 	=> 0
                //{
                //}

                // externalCharginID
                //26 	=> 0
                //{
                //}

                //  sgsnPLMNIdentifier
                //27		=> 0
                //{
                //}

                // pSFurnishChargingInformation
                //28 	=> 0
                //{
                //}

                //  servedIMEISV
                29		=> 0
                {
                    module_flat.SERVED_IMEI = ASN(asn1_pos, input.IMEI);
                    module_flat.SERVED_IMEI 	= Swap(ASN(asn1_pos, input.OctetString));
                }

                //  rATType - Projeto Big Data
                30		=> 0
                {
                    module_flat.RAT_TYPE = ASN(asn1_pos, input.Integer);
                }


                //  mSTimeZone
                //31		=> 0
                //{
                //}

                //  userLocationInformation
                32		=> 0
                {	
					sTemp = cgdc_substring( ASN(asn1_pos, input.OctetString),8,4);
					sTemp2 = SUFFIX(ASN(asn1_pos, input.OctetString),2);
					module_flat.LOCATION_AREA_CODE = sTemp;
					module_flat.CELL = sTemp2;
					//module_flat.LOCATION_AREA_CODE = SUFFIX(sTemp,2);
					//	cgdc_puterr("LAC", "[%s]", hex_to_decimal(ASN(asn1_pos, input.OctetString));
					//	module_flat.LOCATION_AREA_CODE = CONCAT( "20", PREFIX( ASN(asn1_pos, input.OctetString), 12));
                
					//d95354 - big Data - Ariana Dias  SGWRecord_TAG				
				
					sCgiTemp =  ASN(asn1_pos, input.OctetString);
					gsCgi = "";
					iReturn = formataCgiEcgi(sCgiTemp);		
					module_flat.CGI = gsCgi;											
					
					//d95354 - big data - fim			
						
				}

                //  cAMELChargingInformation
                //33		=> 0
                //{
                //}


                //------------------------------------------------
                //  4 - gsnAddres      				- This only one level down
                //  6 - sgsnAddress  						- This only one level down
                // 19 - recordExtensions				- This only one level down
                // 9 - servedPDPAddress	   			- This is 2 levels down
                // 12 - listOfTrafficVolumes   	- This is 2 levels down
                //------------------------------------------------
                4, 6, 19, 9, 12, 43 => 0
                {
                        asn1_copy_handle (asn1_pos, new_pos);
                        //----------------------------------------------
                        // Go to the 2nd(Child) level.
                        //------------------------------------------------
                        status = asn1_find_tag (new_pos, CGDC_ASN1_CHILD, 0);
                        if (!status)
                        {
                            cgdc_error_write ("asn1_find_tag () failure.\n");
                            return (1);
                        }

                        ntag = asn1_get_tag (new_pos);

                        iStatus1 = TABLE(iTag)
                        {
                            //  4 - gsnAddres      - This only one level down
                            4 => 1
                            {
                                module_flat.GGSN_ADDRESS = Format_IP_Address( ASN(new_pos, input.OctetString) );
                            }

                            //  6 - sgsnAddress     - This only one level down
                            6 => 1
                            {
                                module_flat.SGSN_ADDRESS = Format_IP_Address( ASN(new_pos, input.OctetString));
                            }

                            //  19 - recordExtensions     - This only one level down
                            //19 => 1
                            //{
                            //}

                            // 12 - listOfTrafficVolumes	      - This only one level down
                            //12 => 1
                            //{
                            //}

                            // 20 - diagnostics	   - This is 1 levels down
                            //20 => 1
                            //{
                            //}

                            DEFAULT => 1
                            {	// tag is either 14

                                asn1_copy_handle (new_pos, third_pos);

                                status 	= asn1_find_tag (third_pos, CGDC_ASN1_CHILD, 0);
                                ntag 	= asn1_get_tag (third_pos);



                                if ( iTag == 9 )
                                {TRACE("ENTROU NA TAG 9\n");
                                    if (status)
                                    {
                                        if ( ntag == 0 )
                                        {
											sAux = ASN(third_pos, input.OctetString);
											
                                            //module_flat.SERVED_PDP_ADDRESS = Format_IP_Address( ASN(third_pos, input.OctetString));
											
											TRACE(CONCAT("valor asn1: ",sAux,"\n"));
											TRACE(CONCAT("asn1 Tam: ",sizeof(sAux),"\n"));
											
											
												TRACE(CONCAT("IPv4: ",sAux,"\n"));
												TRACE(CONCAT("IPv4 Tam: ",sizeof(sAux),"\n"));
												module_flat.SERVED_PDP_ADDRESS = Format_IP_Address( ASN(third_pos, input.OctetString));
                                        }
										if ( ntag == 1 )
                                        {
											sAux = ASN(third_pos, input.OctetString);
											
                                            //module_flat.SERVED_PDP_ADDRESS = Format_IP_Address( ASN(third_pos, input.OctetString));
											module_flat.SERVED_PDP_ADDRESS = module_flat.GGSN_ADDRESS ;
											
											TRACE(CONCAT("valor asn1: ",sAux,"\n"));
											TRACE(CONCAT("asn1 Tam: ",sizeof(sAux),"\n"));
											
												TRACE(CONCAT("IPv6: ",sAux,"\n"));
												TRACE(CONCAT("IPv6 Tam: ",sizeof(sAux),"\n"));
												
												dig1 = cgdc_substring (sAux, 0, 4);
												dig2 = cgdc_substring (sAux, 4, 4);
												dig3 = cgdc_substring (sAux, 8, 4);
												dig4 = cgdc_substring (sAux, 12, 4);
												dig5 = cgdc_substring (sAux, 16, 4);
												dig6 = cgdc_substring (sAux, 20, 4);
												dig7 = cgdc_substring (sAux, 24, 4);
												dig8 = cgdc_substring (sAux, 28, 4);
											
												module_flat.IPV6_ADDRESS = (FORMAT ("%s:%s:%s:%s:%s:%s:%s:%s" , dig1, dig2, dig3, dig4, dig5, dig6, dig7, dig8 ));
                                        }
                                    }
                                }
								
								if ( iTag == 43 )
                                {TRACE("ENTROU NA TAG 43\n");

                                    if (status)
                                    {
                                        if ( ntag == 0 )
                                        {
                                            sAux = ASN(third_pos, input.OctetString);
									
											//module_flat.SERVED_PDP_ADDRESS = Format_IP_Address( ASN(third_pos, input.OctetString));
											
											TRACE(CONCAT("valor asn1: ",sAux,"\n"));
											TRACE(CONCAT("asn1 Tam: ",sizeof(sAux),"\n"));
											
												TRACE(CONCAT("IPv4: ",sAux,"\n"));
												TRACE(CONCAT("IPv4 Tam: ",sizeof(sAux),"\n"));
												module_flat.SERVED_PDP_ADDRESS = Format_IP_Address( ASN(third_pos, input.OctetString));
                                        }
										else if ( ntag == 1 )
										{
											sAux = ASN(third_pos, input.OctetString);
											
											//module_flat.SERVED_PDP_ADDRESS = Format_IP_Address( ASN(third_pos, input.OctetString));
											TRACE(CONCAT("valor asn1 - tag 1: ",sAux,"\n"));
											TRACE(CONCAT("asn1 Tam - tag 1: ",sizeof(sAux),"\n"));
											
												TRACE(CONCAT("IPv6 - tag 1: ",sAux,"\n"));
												TRACE(CONCAT("IPv6 Tam - tag 1: ",sizeof(sAux),"\n"));
												
												dig1 = cgdc_substring (sAux, 0, 4);
												dig2 = cgdc_substring (sAux, 4, 4);
												dig3 = cgdc_substring (sAux, 8, 4);
												dig4 = cgdc_substring (sAux, 12, 4);
												dig5 = cgdc_substring (sAux, 16, 4);
												dig6 = cgdc_substring (sAux, 20, 4);
												dig7 = cgdc_substring (sAux, 24, 4);
												dig8 = cgdc_substring (sAux, 28, 4);
											
												module_flat.IPV6_ADDRESS = (FORMAT ("%s:%s:%s:%s:%s:%s:%s:%s" , dig1, dig2, dig3, dig4, dig5, dig6, dig7, dig8 ));
										}
                                    }
                                }
                            }
                        }
                        asn1_copy_handle (new_pos, asn1_pos);
                    }
                DEFAULT => 0;
            }
        }       
        
        // Dividino - Projeto 4G
        //-------------------------------------------------------------------------
        // PGWRecord  - Module 0 ( 79 )
        //-------------------------------------------------------------------------
        PGWRecord_TAG => 1
        {
            iTarget = table (iTag)
            {
                // recordType
                0		=> 0
                {
                        asn_integer = ASN(asn1_pos, input.Integer);
                        if ( asn_integer == PGWRecord_Type )
                        {
                            module_flat.RECORD_TYPE = PGW;
                        }
                }
                
                //networkInitiation
                //1		=> 0
                //{
                //}

                // servedIMSI
                3		=> 0
                {
                    module_flat.SERVED_IMSI = ASN(asn1_pos, input.IMSI);
                    module_flat.SERVED_IMSI 	= Swap( ASN(asn1_pos, input.OctetString));
                }
                
                // ggsnAddress
                //4		=> 0
                //{
                //}

                //chargingID
                5		=> 0
                {
                    sChargingId = ASN(asn1_pos, input.OctetString);
                    module_flat.CHARGING_ID       = hex_to_decimal(sChargingId);
                }
                // servingNodeAddress
                //6		=> 0
                //{
                //}

                // accessPointNameNI
                7	    => 0
                {
                    clear( raw_data );
                    raw_data.data 			= ASN(asn1_pos, input.IA5String);
                    module_flat.APN_NI 		= ASN(asn1_pos, input.IA5String);
                }
                // pdpType
                //8		=> 0
                //{
                //}

                // servedPDPAddress
                //9		=> 0
                //{
                //}

                //  dynamicAddressFlag
                //11		=> 0
                //{
                //}

                //  listOfTrafficVolumes
                12		=> 0
                {
                    //-----------------------------------------------------------
                    // Decode Tags Level 3
                    //-----------------------------------------------------------
                    decode_listofTrafficVol(input, asn1_pos, iTag, module_flat);
                }
                //  recordOpeningTime
                13		=> 0
                {
                    gsStartTime = CONCAT( "20", PREFIX( ASN(asn1_pos, input.OctetString), 12));
                    module_flat.START_TIME 		= gsStartTime;
                }
                // duration
                14		=> 0
                {
                    gsDuration = ASN(asn1_pos, input.Integer );
                    module_flat.DURATION 		= gsDuration;
                }
                // causeForRecClosing
                15 		=> 0
                {
                    module_flat.SESSION_STATUS = ASN(asn1_pos, input.Integer );
                }
                //  diagnostics
                //16		=> 0
                //{
                //}

                //  recordSequenceNumber
                17		=> 0
                {
                    asn_integer 			= ASN(asn1_pos, input.Integer );
                    module_flat.AGGREGATION_CAUSE	= FORMAT( "%3.3d", asn_integer);
                }

                //  nodeID
                //18		=> 0
                //{
                //}

                // recordExtensions
                //19		=> 0
                //{
                //}

                // localSequenceNumber
                //20		=> 0
                //{
                //}

                //  apnSelectionMode
                //21		=> 0
                //{
                //}

                // servedMSISDN
                22		=> 0
                {
                    sTemp 	=  Swap( ASN(asn1_pos, input.OctetString));
                    module_flat.SERVED_MSISDN = sTemp;
                }

                // chargingCharacteristics
                //23 	=> 0
                //{
                //}

                // chChSelectionMode
                //24 	=> 0
                //{
                //}

                // iMSsignalingContex
                //25 	=> 0
                //{
                //}

                // externalCharginID
                //26 	=> 0
                //{
                //}

                //  sgsnPLMNIdentifier
                //27		=> 0
                //{
                //}

                // pSFurnishChargingInformation
                //28 	=> 0
                //{
                //}

                //  servedIMEISV
                29		=> 0
                {
                    module_flat.SERVED_IMEI = ASN(asn1_pos, input.IMEI);
                    module_flat.SERVED_IMEI 	= Swap(ASN(asn1_pos, input.OctetString));
                }

		//  rATType - Projeto JASPER	
                30		=> 0
                {
                    module_flat.RAT_TYPE = ASN(asn1_pos, input.Integer);
                }		

                //  mSTimeZone
                //31		=> 0
                //{
                //}

                //  userLocationInformation
                32		=> 0
                {
					sTemp =  cgdc_substring( ASN(asn1_pos, input.OctetString),8,4);
					//module_flat.LOCATION_AREA_CODE = SUFFIX(sTemp,2);
					module_flat.LOCATION_AREA_CODE = sTemp;
					
					//Projeto JASPER
					sTemp =  ASN(asn1_pos, input.OctetString);
					module_flat.CGI = sTemp;
				
                //	cgdc_puterr("LAC", "[%s]", hex_to_decimal(ASN(asn1_pos, input.OctetString));
               //		module_flat.LOCATION_AREA_CODE = CONCAT( "20", PREFIX( ASN(asn1_pos, input.OctetString), 12));
                }

                //  cAMELChargingInformation
                //33		=> 0
                //{
                //}


                //------------------------------------------------
                //  4 - gsnAddres      				- This only one level down
                //  6 - sgsnAddress  						- This only one level down
                // 19 - recordExtensions				- This only one level down
                // 9 - servedPDPAddress	   			- This is 2 levels down
                // 12 - listOfTrafficVolumes   	- This is 2 levels down
                //------------------------------------------------
                4, 6, 19, 9, 12, 45 => 0
                {
                        asn1_copy_handle (asn1_pos, new_pos);
                        //----------------------------------------------
                        // Go to the 2nd(Child) level.
                        //------------------------------------------------
                        status = asn1_find_tag (new_pos, CGDC_ASN1_CHILD, 0);
                        if (!status)
                        {
                            cgdc_error_write ("asn1_find_tag () failure.\n");
                            return (1);
                        }

                        ntag = asn1_get_tag (new_pos);

                        iStatus1 = TABLE(iTag)
                        {
                            //  4 - gsnAddres      - This only one level down
                            4 => 1
                            {
                                module_flat.GGSN_ADDRESS = Format_IP_Address( ASN(new_pos, input.OctetString) );
                            }

                            //  6 - sgsnAddress     - This only one level down
                            6 => 1
                            {
                                module_flat.SGSN_ADDRESS = Format_IP_Address( ASN(new_pos, input.OctetString));
                            }

                            //  19 - recordExtensions     - This only one level down
                            //19 => 1
                            //{
                            //}

                            // 12 - listOfTrafficVolumes	      - This only one level down
                            //12 => 1
                            //{
                            //}

                            // 20 - diagnostics	   - This is 1 levels down
                            //20 => 1
                            //{
                            //}

                            DEFAULT => 1
                            {	// tag is either 14

                                asn1_copy_handle (new_pos, third_pos);

                                status 	= asn1_find_tag (third_pos, CGDC_ASN1_CHILD, 0);
                                ntag 	= asn1_get_tag (third_pos);

                                if ( iTag == 9 )
                                {TRACE("ENTROU NA TAG 9\n");
                                    if (status)
                                    {
                                        if ( ntag == 0 )
                                        {
                                            sAux = ASN(third_pos, input.OctetString);
											
                                            //module_flat.SERVED_PDP_ADDRESS = Format_IP_Address( ASN(third_pos, input.OctetString));
											
											TRACE(CONCAT("valor asn1: ",sAux,"\n"));
											TRACE(CONCAT("asn1 Tam: ",sizeof(sAux),"\n"));
											
												TRACE(CONCAT("IPv4: ",sAux,"\n"));
												TRACE(CONCAT("IPv4 Tam: ",sizeof(sAux),"\n"));
												module_flat.SERVED_PDP_ADDRESS = Format_IP_Address( ASN(third_pos, input.OctetString));
                                        }
										if ( ntag == 1 )
                                        {
                                            sAux = ASN(third_pos, input.OctetString);
											
                                            //module_flat.SERVED_PDP_ADDRESS = Format_IP_Address( ASN(third_pos, input.OctetString));
											
											TRACE(CONCAT("valor asn1: ",sAux,"\n"));
											TRACE(CONCAT("asn1 Tam: ",sizeof(sAux),"\n"));
											
												TRACE(CONCAT("IPv6: ",sAux,"\n"));
												TRACE(CONCAT("IPv6 Tam: ",sizeof(sAux),"\n"));
												
												dig1 = cgdc_substring (sAux, 0, 4);
												dig2 = cgdc_substring (sAux, 4, 4);
												dig3 = cgdc_substring (sAux, 8, 4);
												dig4 = cgdc_substring (sAux, 12, 4);
												dig5 = cgdc_substring (sAux, 16, 4);
												dig6 = cgdc_substring (sAux, 20, 4);
												dig7 = cgdc_substring (sAux, 24, 4);
												dig8 = cgdc_substring (sAux, 28, 4);
											
												module_flat.IPV6_ADDRESS = (FORMAT ("%s:%s:%s:%s:%s:%s:%s:%s" , dig1, dig2, dig3, dig4, dig5, dig6, dig7, dig8 ));
                                        }
                                    }
                                }
								
								if ( iTag == 45 )
                                {TRACE("ENTROU NA TAG 45\n");

                                    if (status)
                                    {
                                        if ( ntag == 0 )
                                        {
                                            sAux = ASN(third_pos, input.OctetString);
									
											//module_flat.SERVED_PDP_ADDRESS = Format_IP_Address( ASN(third_pos, input.OctetString));
											
											TRACE(CONCAT("valor asn1: ",sAux,"\n"));
											TRACE(CONCAT("asn1 Tam: ",sizeof(sAux),"\n"));
											
												TRACE(CONCAT("IPv4: ",sAux,"\n"));
												TRACE(CONCAT("IPv4 Tam: ",sizeof(sAux),"\n"));
												module_flat.SERVED_PDP_ADDRESS = Format_IP_Address( ASN(third_pos, input.OctetString));
                                        }
										else if ( ntag == 1 )
										{
											sAux = ASN(third_pos, input.OctetString);
											
											//module_flat.SERVED_PDP_ADDRESS = Format_IP_Address( ASN(third_pos, input.OctetString));
											TRACE(CONCAT("valor asn1 - tag 1: ",sAux,"\n"));
											TRACE(CONCAT("asn1 Tam - tag 1: ",sizeof(sAux),"\n"));
											
												TRACE(CONCAT("IPv6 - tag 1: ",sAux,"\n"));
												TRACE(CONCAT("IPv6 Tam - tag 1: ",sizeof(sAux),"\n"));
												
												dig1 = cgdc_substring (sAux, 0, 4);
												dig2 = cgdc_substring (sAux, 4, 4);
												dig3 = cgdc_substring (sAux, 8, 4);
												dig4 = cgdc_substring (sAux, 12, 4);
												dig5 = cgdc_substring (sAux, 16, 4);
												dig6 = cgdc_substring (sAux, 20, 4);
												dig7 = cgdc_substring (sAux, 24, 4);
												dig8 = cgdc_substring (sAux, 28, 4);
												
												module_flat.IPV6_ADDRESS = (FORMAT ("%s:%s:%s:%s:%s:%s:%s:%s" , dig1, dig2, dig3, dig4, dig5, dig6, dig7, dig8 ));
                                        }
                                    }
                                }
                            }
                        }
                        asn1_copy_handle (new_pos, asn1_pos);
                    }
                DEFAULT => 0;
            }
        }
        // - Fim Projeto 4G		



	   //-------------------------------------------------------------------------
	   // SGSNSMORecord  - Module 0 ( 23 )
	   //-------------------------------------------------------------------------
  	   SGSNSMORecord_TAG	=> 1;

	   //-------------------------------------------------------------------------
	   // SGSNSMTRecord  - Module 0 ( 24 )
	   //-------------------------------------------------------------------------
  	   SGSNSMTRecord_TAG	=> 1;


    	default => 0;
	}



//TRACE2 ( (" [decode_tag] End\n") )
	return 0;

} // Fim decode_tag ()

//---------------------------------------------------------------------------------
//   decode_listofTrafficVol
//
//Extract 'tag' data from ASN.1.
//
//Returns: 0:	tag successfully decoded
//	 1:	unrecognized tag
//----------------------------------------------------------------------------------

procedure decode_listofTrafficVol
(
 record "huawei_cgf_r9_asn1" 	input,
 record "cgdc_asn1_pos" 		first_pos,
 integer	 			iTag,
  virtual_record 			module_flat
) returns integer
{
	declare record "cgdc_asn1_pos"       	new_pos;
	declare record "cgdc_asn1_pos"       	prev_pos;
	declare record "cgdc_asn1_pos"       	fourth_pos;
	declare record "cgdc_asn1_pos"       	curr_pos;
	declare record "field_info" 		fAux;

	declare integer status;
	declare integer ntag;

	declare integer iTarget;
	declare integer asn_integer;
	declare integer iStatus;
	declare integer iTemp;
	declare string  sTemp;
	declare string  sTempOctet_L;
	declare string  sTempOctet_R;

	declare unsigned integer iBit_L;
	declare unsigned integer iBit_R;
	declare unsigned integer iBitValue;

	sTempOctet_L 	= "";
	sTempOctet_R	= "";
	iBit_L 		= 0;
	iBit_R 		= 0;
	iBitValue 	= 0xFFFF;

	sTemp 		= module_flat.UPLINK;
	sTemp 		= cgdc_trim( sTemp, ' ', 0);

	if (  cgdc_isdigits( sTemp ) )
	{
		giUplink = sTemp;
	}
	else
	{
		giUplink = 0;
	}


	sTemp = module_flat.DOWNLINK;
	sTemp = cgdc_trim( sTemp, ' ', 0);

	if (  cgdc_isdigits( sTemp ) )
	{
		giDownlink = sTemp;
	}
	else
	{
		giDownlink = 0;
	}

         //------------------------------------
	 // Tag level at [UNIVERSAL 16]
        //------------------------------------
	status = asn1_find_tag (first_pos, CGDC_ASN1_CHILD, 0);
	if ( status )
	{
            asn1_copy_handle (first_pos, prev_pos);

             //-----------
            // Get first.
             //-----------
	    status = asn1_find_tag (prev_pos, CGDC_ASN1_FIRST, 0);

	    //---------------------------------------------------
	    // Parse all tags at this level[ UNIVERSAL 16].
	    //---------------------------------------------------
	    while (status)
	    {

	        asn1_copy_handle (prev_pos, new_pos);

                //------------------------------------
		// Go to next(child) level.
                //------------------------------------
             	status = asn1_find_tag (new_pos, CGDC_ASN1_CHILD, 0);
		if ( status )
		{
			status = asn1_find_tag (new_pos, CGDC_ASN1_FIRST, 0);
			while (status)
			{
				ntag = asn1_get_tag (new_pos);
			     	iTarget = table (ntag)
				{
					// qosRequested
					1 => 0
					{
						sTemp = ASN(new_pos, input.OctetString);

//TRACE2( ("\n    (decode_listofTrafficVol-01) Tag=%d Qos=%s", ntag, sTemp) )

						// -----------------------------------------------
						// # From octeto ==>   112233445566778899aabbcc
						// Show data: Qos=0323331F9396102074FB1010
						// -----------------------------------------------
						//     0123456789
    						//     11223344
						// Qos=0323331F9396102074FB1010
						// -----------------------------------------------
						// qoR_reliability - octect 2, bits: 3,2,1
						// -----------------------------------------------
						//sTempOctet_R 	= cgdc_substring( sTemp, 3, 1 );
						//iBit_R 		= cgdc_hex_to_integer( sTempOctet_R );
						//iBitValue 	= 0x07 & iBit_R ;
                                                //
						//module_flat.qoR_reliability = iBitValue;

						// -----------------------------------------------
						//     0123456789
    						//     11223344
						// Qos=0323331F9396102074FB1010
						// -----------------------------------------------
						// qoR_delay       - octect 2, bits: 6,5,4
						// -----------------------------------------------
//						sTempOctet_L 	= cgdc_substring( sTemp, 2, 1 );
//						sTempOctet_R 	= cgdc_substring( sTemp, 3, 1 );
//						iBit_L 		= cgdc_hex_to_integer( sTempOctet_L );
//						iBit_R 		= cgdc_hex_to_integer( sTempOctet_R );
//$$
//						iBit_L 		= iBit_L & 0x03;
//						iBit_R 		= iBit_R & 0x08;
//						iBitValue 	= (( iBit_L << 4 )| iBit_R ) >> 3 ;
//$$
//						module_flat.qoR_delay = iBitValue;

						// -----------------------------------------------
						//     0123456789
    						//     11223344
						// Qos=0323331F9396102074FB1010
						// -----------------------------------------------
						// qoR_precedence  - octect 3, bits: 3,2,1
						// -----------------------------------------------
						//sTempOctet_R 	= cgdc_substring( sTemp, 5, 1 );
						//iBit_R 		= cgdc_hex_to_integer( sTempOctet_R );
						//iBitValue 	= 0x07 & iBit_R ;
						//module_flat.qoR_precedence =  iBitValue;

						// -----------------------------------------------
						//     0123456789
    						//     11223344
						// Qos=0323331F9396102074FB1010
						// -----------------------------------------------
						// qoR_peakThrough - octect 3, bits: 8,7,6,5
						// -----------------------------------------------
						sTempOctet_L 	= cgdc_substring( sTemp, 4, 1 );
						iBit_L 		= cgdc_hex_to_integer( sTempOctet_L );
						iBitValue 	= iBit_L ;

						module_flat.PEAK_THROUGHPUT_REQUESTED =  iBitValue;

//TRACE2( ("\n    (decode_listofTrafficVol-16) STempOctet=(%s,%s) iBits=(%x,%x) iBitValue=%x", sTempOctet_L, sTempOctet_R, iBit_L, iBit_R, iBitValue) )

						// -----------------------------------------------
						//     0123456789
    						//     11223344
						// Qos=0323331F9396102074FB1010
						// -----------------------------------------------
						// qoR_meanThrough - octect 4, bits: 5,4,3,2,1
						// -----------------------------------------------
						sTempOctet_L 	= cgdc_substring( sTemp, 6, 1 );
						sTempOctet_R 	= cgdc_substring( sTemp, 7, 1 );
						iBit_L 		= cgdc_hex_to_integer( sTempOctet_L );
						iBit_R 		= cgdc_hex_to_integer( sTempOctet_R );
$$
						iBit_L 		= ( iBit_L & 0x01 ) << 4;
						iBitValue 	= iBit_L | iBit_R  ;
$$
						module_flat.MEAN_THROUGHPUT_REQUESTED =  iBitValue;

//TRACE2( ("\n    (decode_listofTrafficVol-16) STempOctet=(%s,%s) iBits=(%x,%x) iBitValue=%x", sTempOctet_L, sTempOctet_R, iBit_L, iBit_R, iBitValue) )

					}

					// qosNegociated
					2 => 0
 					{
						sTemp = ASN(new_pos, input.OctetString);

//TRACE2( ("\n    (decode_listofTrafficVol-11) Tag=%d Qos=%s", ntag, sTemp) )

						// -----------------------------------------------
						// # From octeto ==>   112233445566778899aabbcc
						// Show data: Qos=0323331F9396102074FB1010
						// -----------------------------------------------
						//     0123456789
    						//     11223344
						// Qos=0323331F9396102074FB1010
						// -----------------------------------------------
						// qoN_reliability - octect 2, bits: 3,2,1
						// -----------------------------------------------
						//sTempOctet_R 	= cgdc_substring( sTemp, 3, 1 );
						//iBit_R 		= cgdc_hex_to_integer( sTempOctet_R );
						//iBitValue 	= 0x07 & iBit_R ;
                                                //
						//module_flat.qoN_reliability = iBitValue;

						// -----------------------------------------------
						//     0123456789
    						//     11223344
						// Qos=0323331F9396102074FB1010
						// -----------------------------------------------
						// qoN_delay       - octect 2, bits: 6,5,4
						// -----------------------------------------------
//						sTempOctet_L 	= cgdc_substring( sTemp, 2, 1 );
//						sTempOctet_R 	= cgdc_substring( sTemp, 3, 1 );
//						iBit_L 		= cgdc_hex_to_integer( sTempOctet_L );
//						iBit_R 		= cgdc_hex_to_integer( sTempOctet_R );
//$$
//						iBit_L 		= iBit_L & 0x03;
//						iBit_R 		= iBit_R & 0x08;
//						iBitValue 	= (( iBit_L << 4 )| iBit_R ) >> 3 ;
//$$
//						module_flat.qoN_delay = iBitValue;


						// -----------------------------------------------
						//     0123456789
    						//     11223344
						// Qos=0323331F9396102074FB1010
						// -----------------------------------------------
						// qoN_precedence  - octect 3, bits: 3,2,1
						// -----------------------------------------------
						//sTempOctet_R 	= cgdc_substring( sTemp, 5, 1 );
						//iBit_R 	= cgdc_hex_to_integer( sTempOctet_R );
						//iBitValue 	= 0x07 & iBit_R ;
						//module_flat.qoN_precedence =  iBitValue;

						// -----------------------------------------------
						//     0123456789
    						//     11223344
						// Qos=0323331F9396102074FB1010
						// -----------------------------------------------
						// qoN_peakThrough - octect 3, bits: 8,7,6,5
						// -----------------------------------------------
						sTempOctet_L 	= cgdc_substring( sTemp, 4, 1 );
						iBit_L 		= cgdc_hex_to_integer( sTempOctet_L );
						iBitValue 	= iBit_L ;

//TRACE2( ("\n    (decode_listofTrafficVol-15) STempOctet=(%s,%s) iBits=(%x,%x) iBitValue=%x", sTempOctet_L, sTempOctet_R, iBit_L, iBit_R, iBitValue) )

						module_flat.PEAK_THROUGHPUT_NEGOTIATED =  iBitValue;
						// -----------------------------------------------
						//     0123456789
    						//     11223344
						// Qos=0323331F9396102074FB1010
						// -----------------------------------------------
						// qoN_meanThrough - octect 4, bits: 5,4,3,2,1
						// -----------------------------------------------
						sTempOctet_L 	= cgdc_substring( sTemp, 6, 1 );
						sTempOctet_R 	= cgdc_substring( sTemp, 7, 1 );
						iBit_L 		= cgdc_hex_to_integer( sTempOctet_L );
						iBit_R 		= cgdc_hex_to_integer( sTempOctet_R );
$$
						iBit_L 		= ( iBit_L & 0x01 ) << 4;
						iBitValue 	= iBit_L | iBit_R  ;
$$

//TRACE2( ("\n    (decode_listofTrafficVol-16) STempOctet=(%s,%s) iBits=(%x,%x) iBitValue=%x", sTempOctet_L, sTempOctet_R, iBit_L, iBit_R, iBitValue) )

						module_flat.MEAN_THROUGHPUT_NEGOTIATED =  iBitValue;
					}

					3 => 0
					{
						sTemp = ASN(new_pos, input.Integer);
						if (  cgdc_isdigits( sTemp ) )
						{
							iTemp 		= sTemp;
							giUplink 	= giUplink + iTemp;
						}
					}

					4 => 0
					{
						sTemp = ASN(new_pos, input.Integer);
						if (  cgdc_isdigits( sTemp ) )
						{
							iTemp 		= sTemp;
							giDownlink 	= giDownlink + iTemp;
						}
					}

//					5 => 0
//					{
//						module_flat.changeCondition = ASN(new_pos, input.Enumerated);
//					}

					6 => 0
					{
						sTemp = PREFIX( ASN(new_pos, input.OctetString), 12);
						module_flat.END_TIME = CONCAT( "20", sTemp );

						//module_flat.END_TIME 	= PREFIX( ASN(new_pos, input.OctetString), 12);
					}
					9 => 0
					{
						status = asn1_find_tag (new_pos, CGDC_ASN1_CHILD, 0);
						while (status)
						{
							ntag = asn1_get_tag (new_pos);
							iTarget = table (ntag)
							{
								// qci
								1 => 0
								{
									sTemp = ASN(new_pos, input.Integer);
									module_flat.QCI = sTemp;
								}
							}
							status = asn1_find_tag (new_pos, CGDC_ASN1_NEXT, 0);
						}
					}
					DEFAULT => 0;
			        }
				status = asn1_find_tag (new_pos, CGDC_ASN1_NEXT, 0);
			}
		}
		status = asn1_find_tag (prev_pos, CGDC_ASN1_NEXT, 0);
	    }
	}

	module_flat.UPLINK   	= giUplink;
	module_flat.DOWNLINK 	= giDownlink;

	//-----------------------------------------
	// Total Volume = Uplink + DownLink Volume
	//-----------------------------------------
	gsVolume	= giUplink + giDownlink;
	module_flat.VOLUME 	= gsVolume;

	return 0;

}// Fim decode_listofTrafficVol


//---------------------------------------------------------------------------------
//   D E C O D E _ T A G _ L E V E L 3
//
//Extract 'tag' data from ASN.1.
//
//Returns: 0:	tag successfully decoded
//	 1:	unrecognized tag
//----------------------------------------------------------------------------------
procedure decode_tag_level3
(
 record "huawei_cgf_r9_asn1" 	input,
 record "cgdc_asn1_pos" 		third_pos,
 integer 				iTag,
 virtual_record 			module_flat
) returns integer
{
	declare record "cgdc_asn1_pos"       	new_pos;
	declare record "cgdc_asn1_pos"       	prev_pos;
	declare record "cgdc_asn1_pos"       	fourth_pos;
	declare record "cgdc_asn1_pos"       	curr_pos;
	declare record "field_info" 		fAux;

	declare integer status;
	declare integer ntag;


	declare integer iTarget;
	declare integer asn_integer;
	declare integer iStatus;

     	iTarget = table (iTag)
	{
		1 => 0
		{
			//---------------------
			// Go down two levels.
			//---------------------
			status = asn1_find_tag (third_pos, CGDC_ASN1_CHILD, 0);
			status = asn1_find_tag (third_pos, CGDC_ASN1_CHILD, 0);
			while (status)
			{
				ntag = asn1_get_tag (third_pos);
//TRACE2 ( ("\n %d: [PMT15-01] iTag=%d", giRecordCount, ntag) )

				//-----------------------------------------------------------
				// Decode Tags Level 4
				//-----------------------------------------------------------
			     	iTarget = table (ntag)
				{
					0 => 0
					{
						module_flat.qoR_reliability 	= ASN(third_pos, input.Enumerated );
					}

					1 => 0
					{
						module_flat.qoR_delay 		= ASN(third_pos, input.Enumerated);
					}

					2 => 0
					{
						module_flat.qoR_precedence 	= ASN(third_pos, input.Enumerated);
					}

					3 => 0
					{
						module_flat.qoR_peakThrough 	= ASN(third_pos, input.Enumerated);
					}

					4 => 0
					{
						module_flat.qoR_meanThrough 	= ASN(third_pos, input.Enumerated);
					}

					DEFAULT => 0;
			       }

				status = asn1_find_tag (third_pos, CGDC_ASN1_NEXT, 0);
			}
			return 0;
		}

		2 => 0
		{
			//---------------------
			// Go down two levels.
			//---------------------
			status = asn1_find_tag (third_pos, CGDC_ASN1_CHILD, 0);
			status = asn1_find_tag (third_pos, CGDC_ASN1_CHILD, 0);

			while (status)
			{
				ntag = asn1_get_tag (third_pos);
//TRACE2 ( ("\n %d: [PMT15-01] iTag=%d", giRecordCount, ntag) )

				//-----------------------------------------------------------
				// Decode Tags Level 4
				//-----------------------------------------------------------
			     	iTarget = table (ntag)
				{
					0 => 0
					{
						module_flat.qoN_reliability 	= ASN(third_pos, input.Enumerated );

					}

					1 => 0
					{
						module_flat.qoN_delay 		= ASN(third_pos, input.Enumerated);
					}

					2 => 0
					{
						module_flat.qoN_precedence 	= ASN(third_pos, input.Enumerated);
					}

					3 => 0
					{
						module_flat.qoN_peakThrough 	= ASN(third_pos, input.Enumerated);
					}

					4 => 0
					{
						module_flat.qoN_meanThrough 	= ASN(third_pos, input.Enumerated);
					}

					DEFAULT => 0;

			       }
				status = asn1_find_tag (third_pos, CGDC_ASN1_NEXT, 0);
//TRACE1 ( ("\n%d:[PMT_15-02] iTag = %d '%s' \n", giRecordCount, asn1_get_tag(third_pos), asn1_get_tag_name(third_pos)) )
			}
			return 0;
		}

		3 => 0
		{
			module_flat.dataVolUplink 	= ASN(third_pos, input.Integer);
		}

		4 => 0
		{
			module_flat.dataVolDownlink 	= ASN(third_pos, input.Integer);
		}

		5 => 0
		{
			module_flat.changeCondition 	= ASN(third_pos, input.Enumerated);
		}

		6 => 0
		{
			module_flat.changeTime 		= Format_Time( ASN(third_pos, input.OctetString));
		}

	    DEFAULT => 0;
       }
	return 0;

}//Fim decode_tag_level3

//--------------------------------------------------------------------------------
// C O N V E R T _ D A T E _ O R _ T I M E .....................................
//
//Converts 6-byte hex string to ASCII equivalent, e.g.
//December 23, 2003 would be passed as string "030C17" and returned as "031224"
//
//--------------------------------------------------------------------------------

procedure convert_date_or_time
(
 string input
) returns string
{
//TRACE2 ( ("%d: input = '%s'\n", giRecordCount, input) )
	return (FORMAT ("%02d%02d%02d",
		    cgdc_hex_to_integer (PREFIX (input, 2)),
		    cgdc_hex_to_integer (cgdc_substring (input, 2, 2)),
		    cgdc_hex_to_integer (cgdc_substring (input, 4, 2))));

} // Fim convert_date_or_time //


//---------------------------------------------------------------------------------
//   		F O R M A T  I P  A D D R E S S
// Formats string in IP address
//Input:   input
//
//Returns: string in IP address format
//----------------------------------------------------------------------------------
procedure Format_IP_Address
(
	 string input
)returns string
{

	declare string dig1;
	declare string dig2;
	declare string dig3;
	declare string dig4;


	//dig1 = suffix(concat ("000",cgdc_hex_to_integer ( cgdc_substring (input, 0, 2))),3);
	//dig2 = suffix(concat ("000",cgdc_hex_to_integer ( cgdc_substring (input, 2, 2))),3);
	//dig3 = suffix(concat ("000",cgdc_hex_to_integer ( cgdc_substring (input, 4, 2))),3);
	//dig4 = suffix(concat ("000",cgdc_hex_to_integer ( cgdc_substring (input, 6, 2))),3);

	dig1 = cgdc_hex_to_integer ( cgdc_substring (input, 0, 2));
	dig2 = cgdc_hex_to_integer ( cgdc_substring (input, 2, 2));
	dig3 = cgdc_hex_to_integer ( cgdc_substring (input, 4, 2));
	dig4 = cgdc_hex_to_integer ( cgdc_substring (input, 6, 2));

	return (FORMAT ("%s.%s.%s.%s" , dig1, dig2,dig3, dig4 ));

}// Fim Format_IP_Address


//---------------------------------------------------------------------------------
//   		Format_accessPoint_Name
// Formats Access Point Name
//Input:   input
//
//Returns: string
//----------------------------------------------------------------------------------
procedure Format_accessPoint_Name
(
	 string input
)returns string
{
	declare integer max;
	declare integer largo;
	declare integer pos;
	declare string dom;

	max = sizeof( input );
	pos = 0;
	dom = "";
	while ( pos < max  )
	{
		if ( BYTE(raw_data.data, pos ) < 0x30 )
		{
			dom = concat( dom, "." );
		}
		else
		{
			dom = concat( dom, cgdc_substring (input, pos, 1 ) );
		}
		pos = pos + 1;
	}
	return( dom );

} // Fim Format_accessPoint_Name

//---------------------------------------------------------------------------------
//   		F O R M A T _ T I M E
// Formats Access Point Name
//Input:   input
//
//Returns: string
//----------------------------------------------------------------------------------
procedure Format_Time
(
	 string input
)returns string
{
	declare string str1;
	declare string str2;
	declare string str3;
	declare string sSinal;

	//-------------------------------
	//	012345678901234567890
	//	0407210108142D0300
	//      20040721010814+03:00
	//-------------------------------

	str1 =  cgdc_substring (input, 0, 12);
	str2 =  cgdc_substring (input, 13, 1);
	if ( str2 == "D" )
	{
	  sSinal = "+";
	}
	else
	{
	  sSinal = "-";
	}
	str2 = cgdc_substring (input, 14, 2);
	str3 = cgdc_substring (input, 16, 2);


	return (FORMAT ("20%s%s%s:%s" , str1, sSinal, str2, str3 ));

} // Fim Format_Time

//------------------------------------------------------------------------------
// Procedure: Swap
// Function: Swap Numbers and remove "F"
//------------------------------------------------------------------------------
procedure Swap
(	string     sNumber
) returns string
{
	declare integer iAux;
	declare integer iMax;
	declare string sReturnString;


	cgdc_swap_chars( sNumber );

	sReturnString 	= "";
	iAux 		= 0;
	iMax 		= sizeof( sNumber );

	while( iAux < iMax )
	{
		if ( cgdc_substring( sNumber, iAux, 1 ) != "F" )
		{
			sReturnString = CONCAT( sReturnString, cgdc_substring(sNumber, iAux, 1));
		}

		iAux = iAux + 1;
	}

	return( sReturnString );

}// Fim Swap


//******************************************************************************
// Procedure:   Pow
// Objetivo:    calcula a potencia de um numero
//      Ex1: Pow(5,2) eh igual a 5^2 == 25
//      Ex2: Pow(3,3) eh igual a 3^3 == 27
//      Ex3: Pow(2,5) eh igual a 2^5 == 32
// Retorno: Resultado da potenciacao
//******************************************************************************
procedure Pow
(
        integer iNumA,
        integer iNumB
) returns unsigned long integer
{
        if(iNumB <= 0 )
        {
                return 1;
        }
        else
        {
                return iNumA * Pow(iNumA, iNumB-1);
        }
}//End Pow

//******************************************************************************
// Procedure:   hex_to_long
// Objetivo:    Converte um valor hexa para decimal e retorna um long integer
// OBS: NAO use essa procedure. Use a procedure hex_to_decimal
// Retorno: Resultado da potenciacao
//******************************************************************************
procedure hex_to_long
(
        string sHex,
        integer iNum
) returns long integer
{
        declare integer iNumber;
        iNumber = 0;

        if(sizeof(sHex) == 0)
        {
                return 0;
        }
        else
        {       iNumber = TABLE(cgdc_suffix(sHex,1))
                {
                        "A"+    => 10;
                        "B"+    => 11;
                        "C"+    => 12;
                        "D"+    => 13;
                        "E"+    => 14;
                        "F"+    => 15;
                        default => same;
                }

                return hex_to_long(cgdc_prefix(sHex,sizeof(sHex)-1), (iNum+1)) + (iNumber * Pow(16,iNum));
        }
}//End hex_to_long

//******************************************************************************

// Procedure:   hex_to_decimal

// Objetivo:    Converte um valor hexa para decimal e retorna uma string

// Retorno:     Decimal em String

//******************************************************************************

procedure hex_to_decimal

(

        string sHex

) returns string

{

        declare string sDecimal;

        sDecimal = "";



        sDecimal = hex_to_long(sHex, 0);

        sDecimal = cgdc_trim(sDecimal, ' ',CGDC_TRIM_RIGHT);

        sDecimal = cgdc_trim(sDecimal, ' ', 0); //left trim



        return sDecimal;

}//End hex_to_decimal

//******************************************************************************

// Procedure:   formataCgiEcgi

// Objetivo: converte ECGI de 26bytes a partir do userLocationInformation

// Retorno:    ECGI formatado com 15 bytes

//******************************************************************************
procedure formataCgiEcgi
(
	string sCgiTemp
) returns integer
{
	declare string sMCC;
	declare string sMNC;
	declare string sENodeB_ID;	
	declare string sCI;

	sMCC = "";
	sMNC = "";
	sENodeB_ID = "";
    sCI  = ""; 
	gsCgi = "";
	
	sMCC = cgdc_substring(sCgiTemp,13,1);		
	sMCC = CONCAT(sMCC,cgdc_substring(sCgiTemp,12,1));			
	sMCC = CONCAT(sMCC,cgdc_substring(sCgiTemp,15,1));		
		
	sMNC = cgdc_substring(sCgiTemp,17,1);		
	sMNC = CONCAT(sMNC,cgdc_substring(sCgiTemp,16,1));
		
	sENodeB_ID = cgdc_hex_to_integer(cgdc_substring(sCgiTemp,18,6));
			
	while (sizeof(sENodeB_ID) < 7)
	{
		sENodeB_ID = concat("0",sENodeB_ID);
	}
	
	sCI = cgdc_substring(sCgiTemp,24,2);			
	while (sizeof(sCI) < 3)
	{
		sCI = concat("0",sCI);
	}			
		
	gsCgi = CONCAT(sMCC, sMNC, sENodeB_ID, sCI);
		
	return TRUE;

}


procedure FiltraCenario
(
 string numA
)returns integer
{

    
    declare datetime_string sData;
    declare string sAux_NumA;

    
     TRACE(CONCAT("numA [",numA,"] \n"));
    
     sAux_NumA = numA;
     

     TRACE(CONCAT("sAux_NumA antes do if [",sAux_NumA,"] \n"));

    if (PREFIX(sAux_NumA,2) == "55")
    {
     TRACE("entao \n");
        sAux_NumA = cgdc_substring(sAux_NumA,2,-1);
        
    } 
    else
    {
        TRACE("else \n");
        sAux_NumA = numA;
    }
    
    TRACE(CONCAT("sAux_NumA [",sAux_NumA,"] \n"));
    
    
    sData = cgdc_get_local_time();
    
     TRACE(CONCAT("sData sistem [",sData,"] \n"));
    
    sData = prefix(sData,14);
    
    TRACE(CONCAT("sData frefix [",sData,"] \n"));
    
     giRetorno =FALSE;
     
     if(VerificaSelCDRCenario@vivo_common_procedures(sAux_NumA,sData))
     {
         
         giRetorno= TRUE;
     }
    
    
    
    return giRetorno;
    
}